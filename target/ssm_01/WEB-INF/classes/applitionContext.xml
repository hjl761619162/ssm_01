<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--  Spring的配置文件，配置业务逻辑相关  -->
    <!--  Spring配置文件的核心点（数据源，与mybatis的整个，事务控制）  -->

    <!--  数据源配置  -->
<!--=======================================================================-->
    <!--  扫描业务逻辑组件（除了控制器不要，其他业务逻辑组件都要）  -->
    <context:component-scan base-package="qq.hjl">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--  引入外部配置文件  -->
    <context:property-placeholder location="classpath:dbconfig.properties"/>
    <!--  数据源  -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--  配置spring和mybatis的整合  -->
<!--=======================================================================-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!--  指定mybatis的全局配置文件的位置      -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    <!--  指定数据源      -->
        <property name="dataSource" ref="dataSource"></property>
    <!--   指定扫描的mybatis的mapper文件的位置    -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>

    <!-- 配置扫描器，将mybatis接口的实现加入到IOC容器中   -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!--  扫描所有的dao接口的实现，加入到IOC容器中      -->
        <property name="basePackage" value="qq.hjl.crud.dao"/>
    </bean>

    <!--配置一个可以执行批量的sqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>


    <!-- 事务控制的配置  -->
<!--=======================================================================-->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <!--  控制住数据源   -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 开启基于注解的事务，使用xml配置形式的事务 （重要的使用xml配置式） -->
    <aop:config>
    <!--  切入点表达式      -->
        <aop:pointcut id="txPoint" expression="execution(* qq.hjl.crud.*.*(..))"/>
        <!--  配置事务增强      -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>
    <!--  配置事务增强，事务如何切入  -->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <!-- 切入的所有方法都是事务方法  -->
            <tx:method name="*"/>
            <!--  以get开始的所有方法         -->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--  Spring配置文件的核心点（数据源，与mybatis的整个，事务控制）  -->

</beans>